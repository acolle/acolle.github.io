{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","list","Array","fill","map","val","idx","id","name","image","text","loremIpsum","count","units","sentenceLowerBound","sentenceUpperBound","cache","CellMeasurerCache","fixedWidth","defaultHeight","renderRow","index","key","style","columnIndex","rowIndex","className","src","alt","logo","width","height","rowHeight","rowRenderer","rowCount","length","overscanRowCount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6NAoGeA,G,OAzFH,WAEV,IAAMC,EAAOC,MAPE,KAOcC,OAAOC,KAAI,SAACC,EAAKC,GAC5C,MAAO,CACLC,GAAID,EACJE,KAAK,YAAD,OAAcF,EAAM,GACxBG,MAAM,iDAAD,OAAmDH,EAAM,EAAzD,4BACLI,KAAMC,qBAAW,CACfC,MAAO,EACPC,MAAO,YACPC,mBAAoB,GACpBC,mBAAoB,UAKpBC,EAAQ,IAAIC,IAAkB,CAChCC,YAAY,EACZC,cAAe,MAoBbC,EAAY,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAC/B,OACE,kBAAC,IAAD,CACED,IAAKA,EACLN,MAAOA,EACPQ,YAAa,EACbC,SAAUJ,GACR,yBAAKE,MAAOA,EAAOG,UAAU,OAC3B,yBAAKA,UAAU,SACb,yBAAKC,IAAK1B,EAAKoB,GAAOZ,MAAOmB,IAAI,sBAEnC,yBAAKF,UAAU,WACb,6BAAMzB,EAAKoB,GAAOb,MAClB,6BAAMP,EAAKoB,GAAOX,UAO9B,OACE,yBAAKgB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKE,IAAMH,UAAU,WAAWE,IAAI,SACzC,8HAQF,yBAAKF,UAAU,QACX,kBAAC,IAAD,MAEE,YAAwB,IAArBI,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACR,OAAO,kBAAC,IAAD,CACLD,MAAOA,EACPC,OAAQA,EACRC,UAAWhB,EAAMgB,UACjBC,YAAab,EACbc,SAAUjC,EAAKkC,OACfC,iBAAkB,WC/EdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.d13092ca.chunk.js","sourcesContent":["import React from 'react';\nimport { loremIpsum } from 'lorem-ipsum';\nimport { AutoSizer, CellMeasurer, CellMeasurerCache, List } from \"react-virtualized\";\nimport logo from './logo.svg';\nimport './App.css';\n\nconst rowCount = 200;\nconst listHeight = 600;\nconst rowHeight = 50;\nconst rowWidth = 800;\n\nconst App = () => {\n\n  const list = Array(rowCount).fill().map((val, idx) => {\n    return {\n      id: idx,\n      name: `Employee ${idx + 1}`,\n      image: `https://avatars.dicebear.com/v2/human/employee${idx + 1}.svg?options[width][]=60`,\n      text: loremIpsum({\n        count: 1,\n        units: 'sentences',\n        sentenceLowerBound: 10,\n        sentenceUpperBound: 100\n      })\n    }\n  });\n\n  const cache = new CellMeasurerCache({\n      fixedWidth: true,\n      defaultHeight: 120\n    });\n\n  {/*\n    Without Virtual Rendering\n    const renderRow = (item) => {\n      return (\n        <div key={item.id} className=\"row\">\n          <div className=\"image\">\n            <img src={item.image} alt=\"employee-picture\" />\n          </div>\n          <div className=\"content\">\n            <div>{item.name}</div>\n            <div>{item.text}</div>\n          </div>\n        </div>\n      );\n    }\n  */}\n\n  const renderRow = ({ index, key, style }) => {\n    return (\n      <CellMeasurer\n        key={key}\n        cache={cache}\n        columnIndex={0}\n        rowIndex={index}>\n          <div style={style} className=\"row\">\n            <div className=\"image\">\n              <img src={list[index].image} alt=\"employee-picture\" />\n            </div>\n            <div className=\"content\">\n              <div>{list[index].name}</div>\n              <div>{list[index].text}</div>\n            </div>\n          </div>\n      </CellMeasurer>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>A React implementation of Virtual Rendering to prevent slow and laggy scrolling of large lists</p>\n      </header>\n      {/*\n        Without Virtual Rendering\n        <div className=\"list\">\n          {list.map(renderRow)}\n        </div>\n      */}\n      <div className=\"list\">\n          <AutoSizer>\n          {\n            ({ width, height }) => {\n              return <List\n                width={width}\n                height={height}\n                rowHeight={cache.rowHeight}\n                rowRenderer={renderRow}\n                rowCount={list.length}\n                overscanRowCount={3} />\n            }\n          }\n          </AutoSizer>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}